# Sonata
sonata_block:
    context_manager: sonata.page.block.context_manager
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]

        sonata.admin.block.search_result:
            contexts:   [admin]

        #sonata.admin_doctrine_orm.block.audit:
        #    contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.action:
        sonata.block.service.rss:
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes

sonata_admin:
    title: %site_name%
    templates:
      user_block: 'AdminBundle:Includes:user_block.html.twig'
    security:
        handler: sonata.admin.security.handler.role
        information:
            EDIT: EDIT
            LIST: LIST
            CREATE: CREATE
            VIEW: VIEW
            DELETE: DELETE
            EXPORT: EXPORT
            OPERATOR: OPERATOR
            MASTER: MASTER

    dashboard:
        blocks:
            # display a dashboard block
            - { position: left, type: sonata.admin.block.admin_list }
sonata_core:
    flashmessage:
        success:
            types:
                - { type: new_document_message }


sonata_classification:


sonata_page:
    slugify_service:   sonata.core.slugify.cocur # old BC value is sonata.core.slugify.native
    multisite:        host
    default_template: default # template key from templates section, used as default for new pages
    templates:
        default:  { path: 'SonataPageBundle::layout.html.twig',          name: 'default' }
        2columns: { path: 'SonataPageBundle::2columns_layout.html.twig', name: '2 columns layout' }

    # Generates a snapshot when a page is saved (from the admin)
    direct_publication: false # or %kernel.debug% if you want to publish in dev mode (but not in prod)

    use_streamed_response: true # set the value to false in debug mode or if the reverse proxy does not handle streamed response
    ignore_route_patterns:
        - ^(.*)admin(.*)   # ignore admin route, ie route containing 'admin'
        - ^_(.*)          # ignore symfony routes

    ignore_routes:
        - sonata_page_cache_esi
        - sonata_page_cache_ssi
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    ignore_uri_patterns:
        - ^/admin\/   # ignore admin route, ie route containing 'admin'

    page_defaults:
        homepage: {decorate: false} # disable decoration for homepage, key - is a page route

    default_template: default # template key from templates section, used as default for pages
    templates:
        default:
          path: 'FrontendBundle:Layout:layout.html.twig'
          name: 'default'
          containers:
              header:
                  name: Header
              content_top:
                  name: Top content
              content:
                  name: Main content
              content_bottom:
                  name: Bottom content
              footer:
                  name: Footer
          matrix:
              layout: |
                  HHHHHHHH
                  TTTTBBBB
                  TTTTBBBB
                  TTTTBBBB
                  TTTTBBBB
                  CCCCCCCC
                  CCCCCCCC
                  FFFFFFFF

              mapping:
                  H: header
                  T: content_top
                  C: content
                  B: content_bottom
                  F: footer
        2columns:
            path: 'SonataPageBundle::2columns_layout.html.twig'
            name: '2 columns layout'
            inherits_containers: default
            containers:
                left_col:
                    name: Left column
                    blocks:
                        - sonata.media.block.media
                        - sonata.media.block.gallery
                        - sonata.media.block.feature_media
                right_col:
                    name: Right column
                    blocks:
                        - sonata.news.block.recent_posts
                        - sonata.order.block.recent_orders
                        - sonata.product.block.recent_products
            matrix:
                layout: |

                    HHHHHHHHHH
                    TTTTTTTTTT
                    TTTTTTTTTT
                    LLLCCCCRRR
                    LLLCCCCRRR
                    BBBBBBBBBB
                    BBBBBBBBBB
                    FFFFFFFFFF

                mapping:
                   H: header
                   T: content_top
                   L: left_col
                   R: right_col
                   C: content
                   B: content_bottom
                   F: footer
    # manage the http errors
    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error

    class:
        page:                 EntityBundle\Entity\Page
        snapshot:             EntityBundle\Entity\Snapshot
        block:                EntityBundle\Entity\Block
        site:                 EntityBundle\Entity\Site

cmf_routing:
    chain:
        routers_by_id:
            # enable the DynamicRouter with high priority to allow overwriting configured routes with content
            #cmf_routing.dynamic_router: 200
            # enable the symfony default router with a lower priority
            sonata.page.router: 150
            router.default: 100


sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false
#
#    providers:
#        image:
#            resizer: sonata.media.resizer.square

sonata_news:
    title:        Sonata Project
    link:         https://sonata-project.org
    description:  Cool bundles on top of Symfony2
    salt:         'secureToken'
    permalink_generator: sonata.news.permalink.date # sonata.news.permalink.collection

    comment:
        notification:
            emails:   [email@example.org, email2@example.org]
            from:     no-reply@sonata-project.org
            template: 'SonataNewsBundle:Mail:comment_notification.txt.twig'

#news:
#    providers:
#        - sonata.media.provider.dailymotion
#        - sonata.media.provider.youtube
#        - sonata.media.provider.image
#
#    formats:
#        small: { width: 150 , quality: 95}
#        big:   { width: 500 , quality: 90}

sonata_formatter:
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        text:
            service: sonata.formatter.text.text
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        rawhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb